
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    function userHasTeam(uid) {
        return get(/databases/$(database)/documents/users/$(uid)).data.teamId != null;
    }

    function getUserTeamId(uid) {
        return get(/databases/$(database)/documents/users/$(uid)).data.teamId;
    }

    function isTeamOwner(teamId, uid) {
        return get(/databases/$(database)/documents/teams/$(teamId)).data.owner == uid;
    }
    
    function isTeamMember(teamId, uid) {
        return exists(/databases/$(database)/documents/teams/$(teamId)/members/$(uid));
    }


    // USERS collection
    match /users/{uid} {
      allow read, update: if isUser(uid);
      allow create: if isSignedIn();
      
      // Subcollections
      match /{subcollection}/{docId} {
        allow read, write: if isUser(uid);
      }
    }

    // TEAMS collection
    match /teams/{teamId} {
        allow read: if isTeamMember(teamId, request.auth.uid);
        allow create, update: if isTeamOwner(teamId, request.auth.uid);

        // MEMBERS subcollection
        match /members/{memberId} {
            allow read: if isTeamMember(teamId, request.auth.uid);
            allow create, delete: if isTeamOwner(teamId, request.auth.uid);
            allow update: if isTeamOwner(teamId, request.auth.uid) || isUser(memberId); // Member can update their own status (e.g. accepting invite)
        }

        // INVITES subcollection (used in previous logic, securing it)
        match /invites/{inviteId} {
             allow read: if isTeamMember(teamId, request.auth.uid);
             allow create, delete: if isTeamOwner(teamId, request.auth.uid);
        }

        // AUDIT LOGS subcollection
        match /auditLogs/{logId} {
            allow read: if isTeamMember(teamId, request.auth.uid);
            allow create: if isTeamMember(teamId, request.auth.uid); // Actions performed by team members create logs
        }
    }
    
    // BLOG collection (publicly readable)
    match /blogPosts/{slug} {
      allow read: if true;
      // Write access should be handled by a secure backend/admin role check,
      // not open on the client. For now, we disallow direct client writes.
      allow write: if false; 
    }
  }
}
